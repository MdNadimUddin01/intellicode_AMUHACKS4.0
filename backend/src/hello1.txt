Folder Structure
--------------------------------------------------
./
    hello.txt
    manage.py
    db.sqlite3
    meeting_room/
        tests.py
        serializers.py
        routing.py
        admin.py
        views.py
        models.py
        apps.py
        __init__.py
        urls.py
        consumers.py
        __pycache__/
            views.cpython-312.pyc
            serializers.cpython-312.pyc
            models.cpython-312.pyc
            admin.cpython-312.pyc
            urls.cpython-312.pyc
            __init__.cpython-312.pyc
            apps.cpython-312.pyc
        migrations/
            __init__.py
            0001_initial.py
            __pycache__/
                0001_initial.cpython-312.pyc
                __init__.cpython-312.pyc
    src/
        wsgi.py
        settings.py
        asgi.py
        __init__.py
        urls.py
        __pycache__/
            urls.cpython-312.pyc
            settings.cpython-312.pyc
            __init__.cpython-312.pyc
            wsgi.cpython-312.pyc


File Contents
--------------------------------------------------


./hello.txt
File type: .txt
Folder Structure
--------------------------------------------------
./
    manage.py
    db.sqlite3
    meeting_room/
        tests.py
        consumer.py
        serializers.py
        routing.py
        admin.py
        views.py
        models.py
        apps.py
        __init__.py
        urls.py
        __pycache__/
            views.cpython-312.pyc
            serializers.cpython-312.pyc
            models.cpython-312.pyc
            admin.cpython-312.pyc
            urls.cpython-312.pyc
            __init__.cpython-312.pyc
            apps.cpython-312.pyc
        migrations/
            __init__.py
            0001_initial.py
            __pycache__/
                0001_initial.cpython-312.pyc
                __init__.cpython-312.pyc
    src/
        wsgi.py
        settings.py
        asgi.py
        __init__.py
        urls.py
        __pycache__/
            urls.cpython-312.pyc
            settings.cpython-312.pyc
            __init__.cpython-312.pyc
            wsgi.cpython-312.pyc


File Contents
--------------------------------------------------


./manage.py
File type: .py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/tests.py
File type: .py
from django.test import TestCase

# Create your tests here.


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/consumer.py
File type: .py
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from .models import Room, RoomParticipant


class RoomConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['meeting_id']
        self.room_group_name = f'room_{self.room_id}'
        self.user = self.scope['user']

        # Check if room exists and user is a participant
        if not await self.is_valid_participant():
            await self.close()
            return
        room_exists = await self.check_room_exists(self.room_name)
        if not room_exists:
            await self.close()
            return

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        # Accept the connection
        await self.accept()

        # Notify others that user has connected
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_connect',
                'message': f'{self.user.username} has joined the room',
                'username': self.user.username
            }
        )

    async def receive(self, text_data):
        data = json.loads(text_data)

        # Check if the user is a regular user sending data
        is_teacher = await self.user.role == 'teacher'
        if not is_teacher:
            # Store data in database (optional, can be disabled for high volume)
            await self.store_data_stream(data)

            # Forward the message to room group with user info
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'data_message',
                    'data': data,
                    'username': self.user.username,
                    'user_id': self.user.id
                }
            )
        else:
            # If admin is sending a command
            if 'command' in data:
                await self.process_admin_command(data)

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

        # Notify others that user has disconnected
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_disconnect',
                'message': f'{self.user.username} has left the room',
                'username': self.user.username
            }
        )

    async def data_message(self, event):
        """Send data to WebSocket"""
        data = event['data']
        username = event.get('username', 'Anonymous')
        user_id = event.get('user_id', None)

        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'type': 'data',
            'data': data,
            'username': username,
            'user_id': user_id
        }))

    async def user_connect(self, event):
        """Send user connected message to WebSocket"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event['message'],
            'username': event['username']
        }))

    async def user_disconnect(self, event):
        """Send user disconnected message to WebSocket"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event['message'],
            'username': event['username']
        }))

    async def admin_command_result(self, event):
        """Send command result to admin"""
        await self.send(text_data=json.dumps({
            'type': 'command_result',
            'success': event['success'],
            'message': event['message'],
            'command': event['command']
        }))

    @database_sync_to_async
    def is_valid_participant(self):
        """Check if room exists and user is a participant"""
        try:
            room = Room.objects.get(id=self.room_id, is_active=True)
            RoomParticipant.objects.get(room=room, user=self.user)
            return True
        except (Room.DoesNotExist, RoomParticipant.DoesNotExist):
            return False

    @database_sync_to_async
    def is_teacher(self):
        """Check if user is teacher for this room"""
        try:
            participant = RoomParticipant.objects.get(
                room__id=self.room_id,
                user=self.user
            )
            return participant.role == 'teacher'
        except RoomParticipant.DoesNotExist:
            return False

    # @database_sync_to_async
    # def store_data_stream(self, data):
    #     """Store data in database"""
    #     try:
    #         room = Room.objects.get(id=self.room_id)
    #         DataStream.objects.create(
    #             room=room,
    #             user=self.user,
    #             data=data
    #         )
    #     except Room.DoesNotExist:
    #         pass

    async def process_admin_command(self, data):
        """Process admin commands"""
        command = data.get('command')

        if command == 'kick_user':
            user_id = data.get('user_id')
            if user_id:
                success, message = await self.kick_user(user_id)

                # Send result back to admin
                await self.send(text_data=json.dumps({
                    'type': 'command_result',
                    'success': success,
                    'message': message,
                    'command': command
                }))

    @database_sync_to_async
    def kick_user(self, user_id):
        """Admin command to remove a user from the room"""
        try:
            room = Room.objects.get(id=self.room_id)
            participant = RoomParticipant.objects.get(
                room=room, user_id=user_id)

            # Don't allow kicking other admins
            if participant.role == 'teacher':
                return False, "Cannot kick another teacher"

            participant.delete()
            return True, f"User {participant.user.username} has been kicked"
        except (Room.DoesNotExist, RoomParticipant.DoesNotExist):
            return False, "User not found in this room"


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/serializers.py
File type: .py
from rest_framework import serializers
from .models import Room, RoomParticipant

class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = RoomParticipant
        fields = ['username', 'email', 'role']
        read_only_fields = ['username', 'email', 'role']

class RoomSerializer(serializers.ModelSerializer):
    teacher = serializers.CharField(source='teacher.username', read_only=True)
    class Meta:
        model = Room
        fields = ['id', 'name', 'teacher', 'description', 'created_at', 'is_active']
        read_only_fields = ['id', 'created_at']

class RoomParticipantSerializer(serializers.ModelSerializer):
    username = serializers.CharField(source='user.username', read_only=True)
    
    class Meta:
        model = RoomParticipant
        fields = ['user', 'username', 'joined_at', 'is_admin']
        read_only_fields = ['joined_at']


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/routing.py
File type: .py
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/room/(?P<room_id>[^/]+)/$', consumers.RoomConsumer.as_asgi()),
]


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/admin.py
File type: .py
from django.contrib import admin
from .models import Room, CustomUser, RoomParticipant

class RoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_at', 'is_active')
    search_fields = ('name',)
    list_filter = ('is_active', 'created_at')
    ordering = ('-created_at',)
    list_per_page = 20
    date_hierarchy = 'created_at'

class CustomUserAdmin(admin.ModelAdmin):
    list_display = ('username', 'email', 'role', 'is_active')
    search_fields = ('username', 'email')
    list_filter = ('role', 'is_active')
    ordering = ('-date_joined',)
    list_per_page = 20
    date_hierarchy = 'date_joined'

class RoomParticipantAdmin(admin.ModelAdmin):
    list_display = ('room', 'user', 'is_tracking')
    search_fields = ('room__name', 'user__username')
    list_filter = ('is_tracking',)
    ordering = ('-room__created_at',)
    list_per_page = 20
    date_hierarchy = 'room__created_at'

admin.site.register(Room, RoomAdmin)
admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(RoomParticipant, RoomParticipantAdmin)

--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/views.py
File type: .py
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import Room, RoomParticipant
from .serializers import RoomSerializer, RoomParticipantSerializer
from django.db import transaction


class IsAdminUser(permissions.BasePermission):
    """Custom permission to only allow admin users."""

    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.is_staff


class RoomViewSet(viewsets.ModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer

    def perform_create(self, serializer):
        """Set the current user as the creator of the room"""
        # Check if the user is a teacher
        if not self.request.user.is_authenticated:
            raise permissions.NotAuthenticated("You must be logged in to create a room.")
        if not self.request.user.role == 'teacher':
            raise permissions.PermissionDenied("You must be a teacher to create a room.")


        # Create the room
        room = serializer.save(created_by=self.request.user)
        RoomParticipant.objects.create(room=room, user=self.request.user, is_admin=True)

    @action(detail=True, methods=['post'])
    def join(self, request, pk=None):
        """Endpoint to join a room"""
        room = self.get_object()
        if not room.is_active:
            return Response({"error": "This room is no longer active"},
                            status=status.HTTP_400_BAD_REQUEST)

        with transaction.atomic():
            participant, created = RoomParticipant.objects.get_or_create(
                room=room,
                user=request.user,
                defaults={'is_tracking': True}
            )
            if not created:
                return Response({"detail": "Already joined this room"},
                                status=status.HTTP_200_OK)

        return Response({"detail": "Successfully joined the room"},
                        status=status.HTTP_201_CREATED)

    @action(detail=True, methods=['post'])
    def leave(self, request, pk=None):
        """Endpoint to leave a room"""
        room = self.get_object()
        try:
            participant = RoomParticipant.objects.get(
                room=room, user=request.user)
            participant.delete()
            return Response({"detail": "Successfully left the room"},
                            status=status.HTTP_200_OK)
        except RoomParticipant.DoesNotExist:
            return Response({"error": "You are not in this room"},
                            status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['post'])
    def deactivate(self, request, pk=None):
        """teacher endpoint to deactivate a room"""
        room = self.get_object()

        # Check if user is an admin for this room
        try:
            if not request.user.is_authenticated:
                raise permissions.NotAuthenticated("You must be logged in to deactivate this room.")
            if not request.user.role == 'teacher':
                raise permissions.PermissionDenied("You must be a teacher to deactivate this room.")

        except RoomParticipant.DoesNotExist:
            return Response({"error": "You are not in this room"},
                            status=status.HTTP_400_BAD_REQUEST)

        room.is_active = False
        room.save()
        return Response({"detail": "Room deactivated successfully"},
                        status=status.HTTP_200_OK)

    @action(detail=True, methods=['get'])
    def participants(self, request, pk=None):
        """List all participants in a room"""
        room = self.get_object()
        participants = RoomParticipant.objects.filter(room=room)
        serializer = RoomParticipantSerializer(participants, many=True)
        return Response(serializer.data)


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/models.py
File type: .py
from django.db import models
from django.contrib.auth.models import AbstractUser
import uuid


class CustomUser(AbstractUser):
    ROLES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )
    role = models.CharField(max_length=7, choices=ROLES)


class Room(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    teacher = models.ForeignKey(
        CustomUser, on_delete=models.CASCADE, related_name='rooms')
    meeting_id = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name


class RoomParticipant(models.Model):
    room = models.ForeignKey(
        Room, on_delete=models.CASCADE, related_name='participants')
    user = models.ForeignKey(
        CustomUser, on_delete=models.CASCADE, related_name='joined_rooms')
    joined_at = models.DateTimeField(auto_now_add=True)
    is_tracking = models.BooleanField(default=False)

    class Meta:
        unique_together = ('room', 'user')

    def __str__(self):
        return f"{self.user.username} in {self.room.name}"


# class DataStream(models.Model):
#     """Model to optionally store streaming data for history/analysis"""
#     room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='data_streams')
#     user = models.ForeignKey(User, on_delete=models.CASCADE)
#     data = models.JSONField()
#     timestamp = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"Data from {self.user.username} at {self.timestamp}"


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/apps.py
File type: .py
from django.apps import AppConfig


class MeetingRoomConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'meeting_room'


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/urls.py
File type: .py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'rooms', views.RoomViewSet)

urlpatterns = [
    path('/', include(router.urls)),
]


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/migrations/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/migrations/0001_initial.py
File type: .py
# Generated by Django 5.2 on 2025-04-12 23:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('meeting_id', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoomParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_tracking', models.BooleanField(default=False)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='meeting_room.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='joined_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('room', 'user')},
            },
        ),
    ]


--------------------------------------------------
File End
--------------------------------------------------


./src/wsgi.py
File type: .py
"""
WSGI config for src project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')

application = get_wsgi_application()


--------------------------------------------------
File End
--------------------------------------------------


./src/settings.py
File type: .py
"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5t2--v)oj^qefs67ht18mzc&_80$g&*f8^3culb^vo%@b__5uv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'rest_framework',
    'meeting_room',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'src.urls'

ASGI_APPLICATION = 'src.asgi.application'

# Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

AUTH_USER_MODEL = 'meeting_room.CustomUser'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'src.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


--------------------------------------------------
File End
--------------------------------------------------


./src/asgi.py
File type: .py
import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
import meeting_room.routing as websocket_app

os.environ.setdefault('DJANGO_SETTINGS_MODULE',
                      'django_websocket_platform.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            websocket_app.routing.websocket_urlpatterns
        )
    ),
})


--------------------------------------------------
File End
--------------------------------------------------


./src/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./src/urls.py
File type: .py
from django.contrib import admin
from django.urls import path, include
from meeting_room import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('meeting_room.urls')),
]


--------------------------------------------------
File End
--------------------------------------------------


--------------------------------------------------
File End
--------------------------------------------------


./manage.py
File type: .py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/tests.py
File type: .py
from django.test import TestCase

# Create your tests here.


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/serializers.py
File type: .py
from rest_framework import serializers
from .models import Room, RoomParticipant, CustomUser
from django.contrib.auth.hashers import make_password


class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password', 'role']
        extra_kwargs = {
            # Password should not be returned in responses
            'password': {'write_only': True},
        }

    def validate_role(self, value):
        """Ensure the role is either 'teacher' or 'student'."""
        if value not in ['teacher', 'student']:
            raise serializers.ValidationError(
                "Role must be either 'teacher' or 'student'.")
        return value

    def create(self, validated_data):
        """Create and return a new user."""
        validated_data['password'] = make_password(validated_data['password'])
        return super().create(validated_data)


class RoomSerializer(serializers.ModelSerializer):
    teacher = serializers.CharField(source='teacher.username', read_only=True)

    class Meta:
        model = Room
        fields = ['id', 'name', 'teacher', 'description',
                  'created_at', 'is_active', 'meeting_id']
        read_only_fields = ['id', 'created_at']

    def validate_meeting_id(self, value):
        """Ensure the meeting_id is unique."""
        if Room.objects.filter(meeting_id=value).exists():
            raise serializers.ValidationError(
                "This meeting ID is already taken.")
        return value


class RoomParticipantSerializer(serializers.ModelSerializer):
    username = serializers.CharField(source='user.username', read_only=True)

    class Meta:
        model = RoomParticipant
        fields = ['user', 'username', 'joined_at', 'is_admin']
        read_only_fields = ['joined_at']


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/routing.py
File type: .py
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/room/(?P<room_id>[^/]+)/$', consumers.RoomConsumer.as_asgi()),
]


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/admin.py
File type: .py
from django.contrib import admin
from .models import Room, CustomUser, RoomParticipant

class RoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_at', 'is_active')
    search_fields = ('name',)
    list_filter = ('is_active', 'created_at')
    ordering = ('-created_at',)
    list_per_page = 20
    date_hierarchy = 'created_at'

class CustomUserAdmin(admin.ModelAdmin):
    list_display = ('username', 'email', 'role', 'is_active')
    search_fields = ('username', 'email')
    list_filter = ('role', 'is_active')
    ordering = ('-date_joined',)
    list_per_page = 20
    date_hierarchy = 'date_joined'

class RoomParticipantAdmin(admin.ModelAdmin):
    list_display = ('room', 'user', 'is_tracking')
    search_fields = ('room__name', 'user__username')
    list_filter = ('is_tracking',)
    ordering = ('-room__created_at',)
    list_per_page = 20
    date_hierarchy = 'room__created_at'

admin.site.register(Room, RoomAdmin)
admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(RoomParticipant, RoomParticipantAdmin)

--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/views.py
File type: .py
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from .models import Room, RoomParticipant
from .serializers import RoomSerializer, RoomParticipantSerializer
from django.db import transaction
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from django.contrib.auth import authenticate, login
from rest_framework.authtoken.models import Token
from .serializers import CustomUserSerializer
from rest_framework.permissions import IsAuthenticated


# class RoomViewSet(viewsets.ModelViewSet):
#     queryset = Room.objects.all()
#     serializer_class = RoomSerializer

#     def perform_create(self, serializer):
#         """Set the current user as the creator of the room"""
#         # Check if the user is a teacher
#         if not self.request.user.is_authenticated:
#             raise permissions.NotAuthenticated(
#                 "You must be logged in to create a room.")
#         if not self.request.user.role == 'teacher':
#             raise permissions.PermissionDenied(
#                 "You must be a teacher to create a room.")

#         # Create the room
#         room = serializer.save(created_by=self.request.user)
#         RoomParticipant.objects.create(
#             room=room, user=self.request.user, is_admin=True)

#     @action(detail=True, methods=['post'])
#     def join(self, request, pk=None):
#         """Endpoint to join a room"""
#         room = self.get_object()
#         if not room.is_active:
#             return Response({"error": "This room is no longer active"},
#                             status=status.HTTP_400_BAD_REQUEST)

#         with transaction.atomic():
#             participant, created = RoomParticipant.objects.get_or_create(
#                 room=room,
#                 user=request.user,
#                 defaults={'is_tracking': True}
#             )
#             if not created:
#                 return Response({"detail": "Already joined this room"},
#                                 status=status.HTTP_200_OK)

#         return Response({"detail": "Successfully joined the room"},
#                         status=status.HTTP_201_CREATED)

#     @action(detail=True, methods=['post'])
#     def leave(self, request, pk=None):
#         """Endpoint to leave a room"""
#         room = self.get_object()
#         try:
#             participant = RoomParticipant.objects.get(
#                 room=room, user=request.user)
#             participant.delete()
#             return Response({"detail": "Successfully left the room"},
#                             status=status.HTTP_200_OK)
#         except RoomParticipant.DoesNotExist:
#             return Response({"error": "You are not in this room"},
#                             status=status.HTTP_400_BAD_REQUEST)

#     @action(detail=True, methods=['post'])
#     def deactivate(self, request, pk=None):
#         """teacher endpoint to deactivate a room"""
#         room = self.get_object()

#         # Check if user is an admin for this room
#         try:
#             if not request.user.is_authenticated:
#                 raise permissions.NotAuthenticated(
#                     "You must be logged in to deactivate this room.")
#             if not request.user.role == 'teacher':
#                 raise permissions.PermissionDenied(
#                     "You must be a teacher to deactivate this room.")

#         except RoomParticipant.DoesNotExist:
#             return Response({"error": "You are not in this room"},
#                             status=status.HTTP_400_BAD_REQUEST)

#         room.is_active = False
#         room.save()
#         return Response({"detail": "Room deactivated successfully"},
#                         status=status.HTTP_200_OK)

#     @action(detail=True, methods=['get'])
#     def participants(self, request, pk=None):
#         """List all participants in a room"""
#         room = self.get_object()
#         participants = RoomParticipant.objects.filter(room=room)
#         serializer = RoomParticipantSerializer(participants, many=True)
#         return Response(serializer.data)


@api_view(['POST'])
@permission_classes([AllowAny])
def register_user(request):
    """Endpoint to register a new user"""
    serializer = CustomUserSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        token, _ = Token.objects.get_or_create(user=user)
        print("USER: ", user, token)
        return Response({
            'token': token.key,
            'user': {
                'id': user.id,
                'username': user.username,
                'email': user.email,
                'role': user.role
            }
        }, status=201)
    # Return detailed validation errors
    return Response(serializer.errors, status=400)


@api_view(['POST'])
@permission_classes([AllowAny])
def login_user(request):
    """Endpoint to log in a user"""
    username = request.data.get('username')
    password = request.data.get('password')
    user = authenticate(username=username, password=password)
    if user:
        token, _ = Token.objects.get_or_create(user=user)
        return Response({
            'token': token.key,
            'user': {
                'id': user.id,
                'username': user.username,
                'role': user.role  # Include the user's role in the response
            }
        }, status=200)
    return Response({'error': 'Invalid credentials'}, status=401)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_room(request):
    """Create a new room (only teachers can create rooms)"""
    # Check if the user is a teacher
    print("USER: ", request.data, request.user)
    if not request.user.role == 'teacher':
        return Response(
            {"error": "You must be a teacher to create a room."},
            status=status.HTTP_403_FORBIDDEN
        )
    serializer = RoomSerializer(data=request.data)
    if serializer.is_valid():
        room = serializer.save(teacher=request.user)
        RoomParticipant.objects.create(
            room=room, user=request.user, is_tracking=True)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def join_room(request, meeting_id):
    """Join a room using meeting_id"""
    try:
        # Fetch the room by meeting_id
        room = Room.objects.get(meeting_id=meeting_id, is_active=True)
    except Room.DoesNotExist:
        return Response({"error": "This room is no longer active or does not exist"}, status=status.HTTP_400_BAD_REQUEST)

    with transaction.atomic():
        participant, created = RoomParticipant.objects.get_or_create(
            room=room,
            user=request.user,
            defaults={'is_tracking': True}
        )
        if not created:
            return Response({"detail": "Already joined this room"}, status=status.HTTP_200_OK)

    return Response({"detail": "Successfully joined the room"}, status=status.HTTP_201_CREATED)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def leave_room(request, room_id):
    """Leave a room"""
    try:
        room = Room.objects.get(id=room_id)
        participant = RoomParticipant.objects.get(room=room, user=request.user)
        participant.delete()
        return Response({"detail": "Successfully left the room"}, status=status.HTTP_200_OK)
    except Room.DoesNotExist:
        return Response({"error": "Room not found"}, status=status.HTTP_404_NOT_FOUND)
    except RoomParticipant.DoesNotExist:
        return Response({"error": "You are not in this room"}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def deactivate_room(request, room_id):
    """Deactivate a room (only teachers can deactivate)"""
    try:
        room = Room.objects.get(id=room_id, teacher=request.user)
    except Room.DoesNotExist:
        return Response({"error": "Room not found or you are not the teacher"}, status=status.HTTP_403_FORBIDDEN)

    room.is_active = False
    room.save()
    return Response({"detail": "Room deactivated successfully"}, status=status.HTTP_200_OK)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_participants(request, room_id):
    """List all participants in a room"""
    try:
        room = Room.objects.get(id=room_id)
    except Room.DoesNotExist:
        return Response({"error": "Room not found"}, status=status.HTTP_404_NOT_FOUND)

    participants = RoomParticipant.objects.filter(room=room)
    serializer = RoomParticipantSerializer(participants, many=True)
    return Response(serializer.data)


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/models.py
File type: .py
from django.db import models
from django.contrib.auth.models import AbstractUser
import uuid


class CustomUser(AbstractUser):
    ROLES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )
    role = models.CharField(max_length=7, choices=ROLES)


class Room(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    teacher = models.ForeignKey(
        CustomUser, on_delete=models.CASCADE, related_name='rooms')
    meeting_id = models.CharField(
        max_length=100, unique=True)  # Required and unique
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name


class RoomParticipant(models.Model):
    room = models.ForeignKey(
        Room, on_delete=models.CASCADE, related_name='participants')
    user = models.ForeignKey(
        CustomUser, on_delete=models.CASCADE, related_name='joined_rooms')
    joined_at = models.DateTimeField(auto_now_add=True)
    is_tracking = models.BooleanField(default=False)

    class Meta:
        unique_together = ('room', 'user')

    def __str__(self):
        return f"{self.user.username} in {self.room.name}"


# class DataStream(models.Model):
#     """Model to optionally store streaming data for history/analysis"""
#     room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='data_streams')
#     user = models.ForeignKey(User, on_delete=models.CASCADE)
#     data = models.JSONField()
#     timestamp = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"Data from {self.user.username} at {self.timestamp}"


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/apps.py
File type: .py
from django.apps import AppConfig


class MeetingRoomConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'meeting_room'


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/urls.py
File type: .py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    login_user,
    register_user,
    create_room,
    join_room,
    leave_room,
    deactivate_room,
    list_participants
)

router = DefaultRouter()

urlpatterns = [
    path('login/', login_user, name='login'),
    # path('logout/', views.logout_view, name='logout'),
    path('register/', register_user, name='register'),
    path('rooms/create/', create_room, name='create-room'),
    # path('rooms/', views.room_list_create, name='room-list-create'),
    path('rooms/<str:meeting_id>/join/', join_room, name='join-room'),
    path('rooms/<str:meeting_id>/leave/', leave_room, name='leave-room'),
    path('rooms/<str:meeting_id>/deactivate/',
         deactivate_room, name='deactivate-room'),
    path('rooms/<str:meeting_id>/participants/',
         list_participants, name='list-participants'),
]


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/consumers.py
File type: .py
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from .models import Room, RoomParticipant


class RoomConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['meeting_id']
        self.room_group_name = f'room_{self.room_id}'
        self.user = self.scope['user']

        # Check if room exists and user is a participant
        if not await self.is_valid_participant():
            await self.close()
            return
        room_exists = await self.check_room_exists(self.room_name)
        if not room_exists:
            await self.close()
            return

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        # Accept the connection
        await self.accept()

        # Notify others that user has connected
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_connect',
                'message': f'{self.user.username} has joined the room',
                'username': self.user.username
            }
        )

    async def receive(self, text_data):
        data = json.loads(text_data)

        # Check if the user is a regular user sending data
        is_teacher = await self.user.role == 'teacher'
        if not is_teacher:
            # Store data in database (optional, can be disabled for high volume)
            await self.store_data_stream(data)

            # Forward the message to room group with user info
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'data_message',
                    'data': data,
                    'username': self.user.username,
                    'user_id': self.user.id
                }
            )
        else:
            # If admin is sending a command
            if 'command' in data:
                await self.process_admin_command(data)

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

        # Notify others that user has disconnected
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_disconnect',
                'message': f'{self.user.username} has left the room',
                'username': self.user.username
            }
        )

    async def data_message(self, event):
        """Send data to WebSocket"""
        data = event['data']
        username = event.get('username', 'Anonymous')
        user_id = event.get('user_id', None)

        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'type': 'data',
            'data': data,
            'username': username,
            'user_id': user_id
        }))

    async def user_connect(self, event):
        """Send user connected message to WebSocket"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event['message'],
            'username': event['username']
        }))

    async def user_disconnect(self, event):
        """Send user disconnected message to WebSocket"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event['message'],
            'username': event['username']
        }))

    async def admin_command_result(self, event):
        """Send command result to admin"""
        await self.send(text_data=json.dumps({
            'type': 'command_result',
            'success': event['success'],
            'message': event['message'],
            'command': event['command']
        }))

    @database_sync_to_async
    def is_valid_participant(self):
        """Check if room exists and user is a participant"""
        try:
            room = Room.objects.get(id=self.room_id, is_active=True)
            RoomParticipant.objects.get(room=room, user=self.user)
            return True
        except (Room.DoesNotExist, RoomParticipant.DoesNotExist):
            return False

    @database_sync_to_async
    def is_teacher(self):
        """Check if user is teacher for this room"""
        try:
            participant = RoomParticipant.objects.get(
                room__id=self.room_id,
                user=self.user
            )
            return participant.role == 'teacher'
        except RoomParticipant.DoesNotExist:
            return False

    # @database_sync_to_async
    # def store_data_stream(self, data):
    #     """Store data in database"""
    #     try:
    #         room = Room.objects.get(id=self.room_id)
    #         DataStream.objects.create(
    #             room=room,
    #             user=self.user,
    #             data=data
    #         )
    #     except Room.DoesNotExist:
    #         pass

    async def process_admin_command(self, data):
        """Process admin commands"""
        command = data.get('command')

        if command == 'kick_user':
            user_id = data.get('user_id')
            if user_id:
                success, message = await self.kick_user(user_id)

                # Send result back to admin
                await self.send(text_data=json.dumps({
                    'type': 'command_result',
                    'success': success,
                    'message': message,
                    'command': command
                }))

    @database_sync_to_async
    def kick_user(self, user_id):
        """Admin command to remove a user from the room"""
        try:
            room = Room.objects.get(id=self.room_id)
            participant = RoomParticipant.objects.get(
                room=room, user_id=user_id)

            # Don't allow kicking other admins
            if participant.role == 'teacher':
                return False, "Cannot kick another teacher"

            participant.delete()
            return True, f"User {participant.user.username} has been kicked"
        except (Room.DoesNotExist, RoomParticipant.DoesNotExist):
            return False, "User not found in this room"


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/migrations/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./meeting_room/migrations/0001_initial.py
File type: .py
# Generated by Django 5.2 on 2025-04-12 23:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('meeting_id', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoomParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_tracking', models.BooleanField(default=False)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='meeting_room.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='joined_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('room', 'user')},
            },
        ),
    ]


--------------------------------------------------
File End
--------------------------------------------------


./src/wsgi.py
File type: .py
"""
WSGI config for src project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')

application = get_wsgi_application()


--------------------------------------------------
File End
--------------------------------------------------


./src/settings.py
File type: .py
"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5t2--v)oj^qefs67ht18mzc&_80$g&*f8^3culb^vo%@b__5uv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'channels',
    'rest_framework',
    'rest_framework.authtoken',
    'meeting_room',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'src.urls'

CORS_ALLOW_ALL_ORIGINS = True

ASGI_APPLICATION = 'src.asgi.application'

# Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

AUTH_USER_MODEL = 'meeting_room.CustomUser'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'src.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


--------------------------------------------------
File End
--------------------------------------------------


./src/asgi.py
File type: .py
import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
import meeting_room.routing as websocket_app

os.environ.setdefault('DJANGO_SETTINGS_MODULE',
                      'django_websocket_platform.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            websocket_app.routing.websocket_urlpatterns
        )
    ),
})


--------------------------------------------------
File End
--------------------------------------------------


./src/__init__.py
File type: .py


--------------------------------------------------
File End
--------------------------------------------------


./src/urls.py
File type: .py
from django.contrib import admin
from django.urls import path, include
from meeting_room import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('meeting_room.urls')),
]


--------------------------------------------------
File End
--------------------------------------------------
